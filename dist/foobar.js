// Generated by purs bundle 0.14.9
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyFn = {
      apply: function (f) {
          return function (g) {
              return function (x) {
                  return f(x)(g(x));
              };
          };
      },
      Functor0: function () {
          return Data_Functor.functorFn;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyFn"] = applyFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = {
      pure: function (x) {
          return function (v) {
              return x;
          };
      },
      Apply0: function () {
          return Control_Apply.applyFn;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  exports["deleteBy"] = deleteBy;
  exports["range"] = $foreign.range;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["filterMap"] = filterMap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return {
          append: function (f) {
              return function (g) {
                  return function (x) {
                      return append(dictSemigroup)(f(x))(g(x));
                  };
              };
          }
      };
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return {
          mempty: function (v) {
              return mempty(dictMonoid);
          },
          Semigroup0: function () {
              return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
          }
      };
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  exports["traverse_"] = traverse_;
  exports["sequence_"] = sequence_;
  exports["oneOf"] = oneOf;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var wrap = Safe_Coerce.coerce;
  exports["wrap"] = wrap;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($8) {
                      return c2d(b2c(a2b($8)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lcmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["lcmap"] = lcmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["mul"] = mul;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function () {
      return function () {
          return function () {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var on = function () {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var prj = function () {
      return function (dictIsSymbol) {
          return function (dictAlternative) {
              return function (p) {
                  return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
              };
          };
      };
  };
  var inj = function () {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
  };
  var match = function () {
      return function () {
          return function () {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Variant.Maybe"] = $PS["Data.Variant.Maybe"] || {};
  var exports = $PS["Data.Variant.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Maybe = function (x) {
      return x;
  };                            
  var nothing = Data_Variant.inj()({
      reflectSymbol: function () {
          return "nothing";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var just = (function () {
      var $96 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "just";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($97) {
          return Maybe($96($97));
      };
  })();
  exports["just"] = just;
  exports["nothing"] = nothing;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  var semigroupEffect = function (dictSemigroup) {
      return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
  };
  var monoidEffect = function (dictMonoid) {
      return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function () {
              return semigroupEffect(dictMonoid.Semigroup0());
          }
      };
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Attribute"] = $PS["Deku.Attribute"] || {};
  var exports = $PS["Deku.Attribute"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Cb = function (x) {
      return x;
  };
  var Attribute = function (x) {
      return x;
  };                                                
  var unsafeUnAttribute = Safe_Coerce.coerce();
  var unsafeAttribute = Attribute;
  var cb$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  var cb = (function () {
      var $26 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(Data_Function["const"](true)));
      return function ($27) {
          return Cb($26($27));
      };
  })();
  var attr = function (dict) {
      return dict.attr;
  };
  exports["attr"] = attr;
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["cb'"] = cb$prime;
  exports["cb"] = cb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                      
  var ABehavior = function (x) {
      return x;
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var sample_ = function (dictIsEvent) {
      return sampleBy(dictIsEvent)(Data_Function["const"]);
  };
  var behavior = ABehavior;
  exports["behavior"] = behavior;
  exports["sample_"] = sample_;
  exports["functorABehavior"] = functorABehavior;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];
  var keepLatest = function (dict) {
      return dict.keepLatest;
  };
  var bang = function (dict) {
      return dict.bang;
  };
  exports["keepLatest"] = keepLatest;
  exports["bang"] = bang;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Control"] = $PS["Deku.Control"] || {};
  var exports = $PS["Deku.Control"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];                
  var unsafeText = function (v) {
      return function (id) {
          return function (parent) {
              return v.makeText({
                  id: id,
                  parent: parent
              });
          };
      };
  };
  var unsafeSetText = function (dictFunctor) {
      return function (v) {
          return function (id) {
              return function (txt) {
                  return Data_Functor.map(dictFunctor)(function ($50) {
                      return v.setText((function (v1) {
                          return {
                              id: id,
                              text: v1
                          };
                      })($50));
                  })(txt);
              };
          };
      };
  };
  var unsafeSetAttribute = function (dictFunctor) {
      return function (v) {
          return function (id) {
              return function (atts) {
                  return Data_Functor.map(dictFunctor)(function ($51) {
                      return v.setAttribute((function (v1) {
                          return {
                              id: id,
                              key: v1.key,
                              value: v1.value
                          };
                      })(Deku_Attribute.unsafeUnAttribute($51)));
                  })(atts);
              };
          };
      };
  };
  var unsafeElement = function (v) {
      return function (id) {
          return function (parent) {
              return function (tag) {
                  return v.makeElement({
                      id: id,
                      parent: parent,
                      tag: tag
                  });
              };
          };
      };
  };
  var text = function (dictIsEvent) {
      return function (txt) {
          var go = function (parent) {
              return function (v) {
                  return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(function (me) {
                      return Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictIsEvent.Plus0())([ FRP_Event_Class.bang(dictIsEvent)(unsafeText(v)(me)(parent)), unsafeSetText((dictIsEvent.Filterable1()).Functor1())(v)(me)(txt) ]);
                  }));
              };
          };
          return go;
      };
  };
  var elementify = function (dictIsEvent) {
      return function (tag) {
          return function (atts) {
              return function (children) {
                  var go = function (parent) {
                      return function (v) {
                          return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(function (me) {
                              return Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictIsEvent.Plus0())(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ FRP_Event_Class.bang(dictIsEvent)(unsafeElement(v)(me)(parent)(tag)), unsafeSetAttribute((dictIsEvent.Filterable1()).Functor1())(v)(me)(atts) ])(Data_Functor.map(Data_Functor.functorArray)(function (kid) {
                                  return kid(me)(v);
                              })(Data_Functor.map(Data_Functor.functorArray)(function (y) {
                                  return y;
                              })(children))));
                          }));
                      };
                  };
                  return go;
              };
          };
      };
  };
  var deku = function (dictIsEvent) {
      return function (root) {
          return function (elts) {
              return function (v) {
                  return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(function (me) {
                      return Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictIsEvent.Plus0())([ FRP_Event_Class.bang(dictIsEvent)(v.makeRoot({
                          id: me,
                          root: root
                      })), (function (y) {
                          return y;
                      })(elts)(me)(v) ]);
                  }));
              };
          };
      };
  };
  exports["elementify"] = elementify;
  exports["text"] = text;
  exports["deku"] = deku;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.OnClick"] = $PS["Deku.DOM.Attr.OnClick"] || {};
  var exports = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  exports["OnClick"] = OnClick;
  exports["attrOnClickCb"] = attrOnClickCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Button"] = $PS["Deku.DOM.Elt.Button"] || {};
  var exports = $PS["Deku.DOM.Elt.Button"];
  var Deku_Control = $PS["Deku.Control"];                
  var button = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("button");
  };
  exports["button"] = button;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Div"] = $PS["Deku.DOM.Elt.Div"] || {};
  var exports = $PS["Deku.DOM.Elt.Div"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Control = $PS["Deku.Control"];                
  var div = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("div");
  };
  var div_ = function (dictIsEvent) {
      return div(dictIsEvent)(Control_Plus.empty(dictIsEvent.Plus0()));
  };
  exports["div_"] = div_;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[y].main.appendChild(state.units[x].main);
			  };
		  };
	  };
  };

  var disconnectXFromY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[y].main.removeChild(state.units[x].main);
			  };
		  };
	  };
  };
  var makeElement = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  listeners: {},
				  parent: a.parent,
				  main: document.createElement(a.tag),
			  };
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeElement = makeElement;
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: document.createTextNode(""),
				  parent: a.parent,
			  };
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  portals: {},
		  unqidfr: makeid(10),
		  terminalPtrs: [],
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (a.key === "@canvas-hack@") {
					  const cxt = state.units[ptr].main.getContext("2d");
					  avv(cxt)();
				  } else {
					  if (state.units[ptr].listeners[a.key]) {
						  state.units[ptr].main.removeEventListener(
							  a.key,
							  state.units[ptr].listeners[a.key]
						  );
					  }
					  var el = (e) => avv(e)();
					  state.units[ptr].main.addEventListener(a.key, el);
					  state.units[ptr].listeners[a.key] = el;
				  }
			  } else {
				  if (state.units[ptr].main.tagName === "INPUT" && a.key === "value") {
					  state.units[ptr].main.value = avv;
				  } else if (state.units[ptr].main.tagName === "INPUT" && a.key === "checked") {
					  state.units[ptr].main.checked = avv === "true" ;
				  } else {
					  state.units[ptr].main.setAttribute(a.key, avv);
				  }
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.nodeValue = a.text; //.replace(/\n/g, "<br>");
		  };
	  };
  };

  exports.makeSubgraph = function (ptr) {
	  return function (parent) {
		  return function (sceneM) {
			  return function (state) {
				  return function () {
					  var children = {};
					  var unsu = {};
					  state.units[ptr] = {
						  parent: parent,
						  sceneM: sceneM,
						  children: children,
						  unsu: unsu,
					  };
				  };
			  };
		  };
	  };
  };

  exports.removeSubgraph = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var j = a.pos;
			  var children = state.units[ptr].children;
			  var unsu = state.units[ptr].unsu;
			  if (children[j] === undefined) {
				  return;
			  }
			  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
				  disconnectXFromY_(children[j].terminalPtrs[k])(state.units[ptr].parent)(
					  children[j]
				  )();
			  }
			  // unsubscribe
			  unsu[j]();
			  // delete unused
			  delete children[j];
			  delete unsu[j];
		  };
	  };
  };

  var insertSubgraph = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var j = a.pos;
			  var index = a.index;
			  var children = state.units[ptr].children;
			  var unsu = state.units[ptr].unsu;
			  var needsConnecting = false;
			  if (unsu[j] === undefined) {
				  children[j] = {
					  units: {},
					  portals: state.portals,
					  terminus: state.units[ptr].parent,
					  unqidfr: makeid(10),
					  parent: ptr,
					  terminalPtrs: [],
				  };
				  children[j].units[state.units[ptr].parent] =
					  state.units[state.units[ptr].parent];
				  var sg = state.units[ptr].sceneM(index)();
				  unsu[j] = sg.actualized(
					  (
						  (jIs) => (instr) => () =>
							  instr(children[jIs])()
					  )(j)
				  )();
				  needsConnecting = true;
			  }
			  if (needsConnecting) {
				  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
					  connectXToY_(children[j].terminalPtrs[k])(state.units[ptr].parent)(
						  children[j]
					  )();
				  }
			  }
		  };
	  };
  };
  var makePursx_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var html = a.html;
			  var verb = a.verb;
			  var cache = a.cache;
			  var parent = a.parent;
			  var scope = a.scope;
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  var entries = Object.entries(cache);
			  for (var i = 0; i < entries.length; i++) {
				  var key = entries[i][0];
				  if (entries[i][1] === true) {
					  // it is an attribute
					  html = html.replace(
						  verb + key + verb,
						  "data-deku-attr-internal=" + '"' + key + '"'
					  );
				  } else {
					  html = html.replace(
						  verb + key + verb,
						  '<span style="display:contents;" data-deku-elt-internal=' +
							  '"' +
							  key +
							  '"></span>'
					  );
				  }
			  }
			  var tmp = document.createElement("div");
			  tmp.innerHTML = html.trim();
			  state.units[ptr] = {
				  listeners: {},
				  parent: parent,
				  main: tmp.firstChild,
			  };
			  tmp.querySelectorAll("[data-deku-attr-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-attr-internal");
				  state.units[key+scope] = {
					  listeners: {},
					  main: e,
				  };
			  });
			  tmp.querySelectorAll("[data-deku-elt-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-elt-internal");
				  state.units[key+scope] = {
					  listeners: {},
					  main: e,
				  };
			  });
			  connectXToY_(ptr)(parent)(state)();
		  };
	  };
  };
  exports.makePursx_ = makePursx_;
  exports.insertSubgraph = insertSubgraph;
  exports.sendSubgraphToTop_ = function (a) {
	  return function (state) {
		  return function () {
			  var child = state.units[a.id].children[a.pos];
			  if (child === undefined) {
				  return;
			  }
			  var l = child.terminalPtrs.length;
			  for (var i = 0; i < child.terminalPtrs.length; i++) {
				  state.units[state.units[a.id].parent].main.prepend(
					  child.units[child.terminalPtrs[l - i - 1]].main
				  );
			  }
		  };
	  };
  };
  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: a.root,
			  };
		  };
	  };
  };
  exports.makePortal_ = function (a) {
	  return function (state) {
		  return function () {
			  var main = document.createElement("div");
			  state.portals[a.id] = {
				  main: main,
			  };
			  state.units[a.id] = {
				  main: main,
			  };
			  main.setAttribute("style", "display:contents;");
		  };
	  };
  };
  exports.makeGateway_ = function (a) {
	  return function (state) {
		  return function () {
			  var main = document.createElement("div");
			  state.units[a.id] = {
				  main: main,
				  portal: a.portal
			  };
			  main.setAttribute("style", "display:contents;");
			  connectXToY_(a.id)(a.parent)(state)();
		  };
	  };
  };
  exports.setPortal_ = function (a) {
	  return function(state) {
		  return function() {
			  if (a.on) {
				  state.units[a.id].main.prepend(state.portals[state.units[a.id].portal].main);
			  } else {
				  state.units[a.id].main.innerHTML = "";
			  }
		  }
	  }
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($46) {
                          return k(f($46));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($47) {
                      return k(f($47));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 106, column 13 - line 108, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 64, column 13 - line 66, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 47, column 13 - line 49, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 54, column 13 - line 56, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $48 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($49) {
                          return $48(p($49));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $50 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($51) {
                          return $50(f($51));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($52) {
                      return Data_Either.hush(f($52));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var bang = function (a) {
      return function (k) {
          return function __do() {
              k(a)();
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      bang: bang,
      Plus0: function () {
          return plusEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["filterableEvent"] = filterableEvent;
  exports["altEvent"] = altEvent;
  exports["plusEvent"] = plusEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function(exports) {
  // Memoize an event
  //
  // Keeps one long-running subscription that broadcasts to
  // downstream subscribers.
  //
  // For data sent on subscribe, this will not help, since it needs
  // to create a subscription to see what data is currently
  // being sent on subscribe. That is, each subscription creates
  // a second short-lived subscription just to ping it for an initial value.
  //
  // But for later events, the data will be shared across several
  // subscriptions. For example, a naive implementation of `map f` will
  // recompute f *for each subscription*, instead of sharing that across
  // the actual event.
  //
  // Thus this places a certain contract on `event`, that it behaves
  // like a "purely functional" event in some sense. Malicious events
  // could send random data to random subscribers.
  //
  // It also requires the events to keep track of their subscriptions
  // and not release essential resources until all subscriptions are
  // cancelled.
  var memoize = function memoize(event) {
	  var downstream = {};
	  var id = 0;
	  var upstream;
	  var receive = function (a) {
		  return function () {
			  for (let k in downstream) {
				  downstream[k](a)();
			  }
		  };
	  };
	  var e = function (subscriber) {
		  return function () {
			  var capture = id;
			  id += 1;
			  var wasEmpty = !Object.keys(downstream).length;
			  downstream[capture] = subscriber;
			  if (wasEmpty) {
				  // Create a global subscription for this memoized Event.
				  // Note that this will properly call subscriber() with initial data
				  // since it was already added to downstream.
				  upstream = event(receive)();
			  } else {
				  // Subscribe the new subscription, and then immediately cancel it,
				  // so it only receives initial data - and from then on it receives
				  // the memoized stream.
				  //
				  // Note: this means that `map f (pure v)` is not memoized /shrug
				  //
				  // It will be the responsibility of `event` to deal with these
				  // temporary subscriptions: it must keep track of how many
				  // subscriptions it has and not deallocate essential resources
				  // until they are all cancelled.
				  event(subscriber)()();
			  }
			  return function () {
				  // Remove the subscription from the list
				  delete downstream[capture];
				  // And cancel the upstream subscription if it was the last one
				  if (!Object.keys(downstream).length) upstream();
			  };
		  };
	  };
	  e.p$mmzbl = true;
	  e.p$mmzd = true;
	  return e;
  };
  exports.memoizeIfMemoizableImpl = function (e) {
		  return e.p$mmzbl ? memoize(e) : e;
  }
  exports.memoizeImpl = function(e) {
    return function() {
      return memoize(e);
    }
  }
  exports.unsafeMemoizeImpl = memoize;
  exports.isMemoizedImpl = function (e) {
	  return e.p$mmzd === true;
  };
  exports.isMemoizableImpl = function (e) {
	  return e.p$mmzbl = true;
  };
})(PS["FRP.Event.Memoize"] = PS["FRP.Event.Memoize"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Memoize"] = $PS["FRP.Event.Memoize"] || {};
  var exports = $PS["FRP.Event.Memoize"];
  var $foreign = $PS["FRP.Event.Memoize"];
  var unsafeMemoize = $foreign.unsafeMemoizeImpl;
  var memoize = function (dict) {
      return dict.memoize;
  };
  var memoizableEvent = {
      memoize: $foreign.memoizeImpl,
      memoizeIfMemoizable: $foreign.memoizeIfMemoizableImpl,
      isMemoized: $foreign.isMemoizedImpl,
      isMemoizable: $foreign.isMemoizableImpl
  };
  exports["memoize"] = memoize;
  exports["unsafeMemoize"] = unsafeMemoize;
  exports["memoizableEvent"] = memoizableEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Memoized"] = $PS["FRP.Event.Memoized"] || {};
  var exports = $PS["FRP.Event.Memoized"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Memoize = $PS["FRP.Event.Memoize"];
  var toEvent = function (v) {
      return v;
  };                    
  var create = Data_Functor.mapFlipped(Effect.functorEffect)(FRP_Event.create)(function (i) {
      return {
          event: FRP_Event_Memoize.unsafeMemoize(i.event),
          push: i.push
      };
  });
  exports["create"] = create;
  exports["toEvent"] = toEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Memoized = $PS["FRP.Event.Memoized"];                
  var effectfulDOMInterpret = {
      ids: Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Show.show(Data_Show.showNumber))(FRP_Behavior.behavior(function (f) {
          return FRP_Event.makeEvent(function (k) {
              return function __do() {
                  var r = Effect_Random.random();
                  return FRP_Event.subscribe(f)(function (x) {
                      return k(x(r));
                  })();
              };
          });
      })),
      makeElement: $foreign.makeElement,
      makeRoot: $foreign.makeRoot_,
      makeText: $foreign.makeText_,
      makePursx: $foreign.makePursx_,
      makePortal: $foreign.makePortal_,
      makeGateway: $foreign.makeGateway_,
      setPortal: $foreign.setPortal_,
      makeSubgraph: function (v) {
          return function (dom) {
              return Data_Function.flip($foreign.makeSubgraph(v.id)(v.parent))(dom)(function (index) {
                  return Data_Exists.runExists(function (v1) {
                      return function __do() {
                          var evt = FRP_Event_Memoized.create();
                          var actualized = (function () {
                              var v2 = v1(evt.push)(FRP_Event_Memoized.toEvent(evt.event));
                              return v2(v.parent)(effectfulDOMInterpret);
                          })();
                          return {
                              actualized: actualized
                          };
                      };
                  })(v.scenes(index));
              });
          };
      },
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      sendSubgraphToTop: $foreign.sendSubgraphToTop_,
      insertSubgraph: $foreign.insertSubgraph,
      removeSubgraph: $foreign.removeSubgraph
  };
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($11) {
          return $10($foreign["_body"]($11));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Toplevel"] = $PS["Deku.Toplevel"] || {};
  var exports = $PS["Deku.Toplevel"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var runInElement$prime = function (elt) {
      return function (psh) {
          return function (mksn) {
              return function __do() {
                  var ffi = Deku_Interpret.makeFFIDOMSnapshot();
                  var v = FRP_Event.create();
                  var evt = Deku_Control.deku(FRP_Event.eventIsEvent)(elt)(mksn(v.push)(v.event))(Deku_Interpret.effectfulDOMInterpret);
                  var unsubscribe = FRP_Event.subscribe(evt)(function (i) {
                      return i(ffi);
                  })();
                  v.push(psh)();
                  return {
                      push: v.push,
                      unsubscribe: unsubscribe
                  };
              };
          };
      };
  };
  var runInBody$prime = function (push) {
      return function (go) {
          return function __do() {
              var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
              return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)({
                  push: Data_Monoid.mempty(Data_Monoid.monoidFn(Effect.monoidEffect(Data_Monoid.monoidUnit))),
                  unsubscribe: Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))
              }))(function (elt) {
                  return runInElement$prime(elt)(push)(go);
              })(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))();
          };
      };
  };
  var runInBody = function (push) {
      return function (go) {
          return Data_Functor["void"](Effect.functorEffect)(runInBody$prime(push)(go));
      };
  };
  exports["runInBody"] = runInBody;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  /* no-redeclare global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.clearTimeout = function (id) {
    return function () {
      clearTimeout(id);
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setTimeout"] = $foreign.setTimeout;
  exports["clearTimeout"] = $foreign.clearTimeout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var insert = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  exports["insert"] = insert;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };
  var NUMERIC = "numeric";
  var SUDDEN = "sudden";
  var CANCELLATION = "cancellation";
  var NO_RAMP = "noRamp";
  var LINEAR_RAMP = "linearRamp";
  var EXPONENTIAL_RAMP = "exponentialRamp";
  var ENVELOPE = "envelope";
  var isCancellation = function (a) {
	  return a.type === CANCELLATION;
  };
  var protoSetter = function (thingee, deprecatedTimeToSet, param) {
	  if (param.type === SUDDEN) {
		  thingee.value = param.value.n;
	  } else {
		  if (param.type === NUMERIC) {
			  thingee[
				  param.value.t.type === NO_RAMP
					  ? "setValueAtTime"
					  : param.value.t.type === LINEAR_RAMP
					  ? "linearRampToValueAtTime"
					  : param.value.t.type === EXPONENTIAL_RAMP
					  ? "exponentialRampToValueAtTime"
					  : "linearRampToValueAtTime"
			  ](param.value.n, deprecatedTimeToSet + param.value.o);
		  } else if (isCancellation(param)) {
			  param.value.hold
				  ? thingee.cancelAndHoldAtTime(deprecatedTimeToSet + param.value.o)
				  : thingee.cancelScheduledValues(deprecatedTimeToSet + param.value.o);
		  } else if (param.type === ENVELOPE) {
			  // envelope is last option
			  const tm = deprecatedTimeToSet + param.value.o;
			  thingee.cancelScheduledValues(Math.max(0.0, tm));
			  thingee.setValueCurveAtTime(param.value.p, tm, param.value.d);
		  } else {
			  throw new Error("No idea what to do with " + JSON.stringify(param));
		  }
	  }
  };
  var workletSetter = function (unit, paramName, deprecatedTimeToSet, param) {
	  return protoSetter(
		  unit.parameters.get(paramName),
		  deprecatedTimeToSet,
		  param
	  );
  };
  var genericSetter = function (unit, name, deprecatedTimeToSet, param) {
	  return protoSetter(unit[name], deprecatedTimeToSet, param);
  };
  var addToScope = function (ptr, scope, state) {
	  if (scope.type === "just") {
		  state.scopes[scope.value].push(ptr);
	  }
  };
  var doDeferredConnections = function (ptr, state) {
	  if (state.toConnect[ptr]) {
		  state.toConnect[ptr].forEach(function (conn) {
			  if (conn.w) {
				  if (state.units[conn.w]) {
					  conn.f();
				  } else {
					  if (!state.toConnect[conn.w]) {
						  state.toConnect[conn.w] = [];
					  }
					  state.toConnect[conn.w].push({ f: conn.f });
				  }
			  } else {
				  conn.f();
			  }
		  });
		  delete state.toConnect[ptr];
	  }
  };
  var mConnectXToY_ = function (x, y, state) {
	  if (y.type === "just") {
		  connectXToY_(x, y.value, state);
	  }
  };
  var connectXToY_ = function (x, y, state) {
	  var connectF = function () {
		  state.units[x].outgoing.push(y);
		  state.units[y].incoming.push(x);
		  if (!state.units[x].pendingOn) {
			  state.units[x].main.connect(state.units[y].main);
			  if (state.units[y].se) {
				  state.units[x].main.connect(state.units[y].se);
			  }
		  }
	  };
	  if (!state.units[x]) {
		  if (!state.toConnect[x]) {
			  state.toConnect[x] = [];
		  }
		  var conn = { f: connectF };
		  if (y !== x && !state.units[y]) {
			  conn.w = y;
		  }
		  state.toConnect[x].push(conn);
		  return;
	  }
	  if (!state.units[y]) {
		  if (!state.toConnect[y]) {
			  state.toConnect[y] = [];
		  }
		  var conn = { f: connectF };
		  if (y !== x && !state.units[x]) {
			  conn.w = x;
		  }
		  state.toConnect[y].push(conn);
		  return;
	  }
	  connectF();
  };

  exports.connectXToY_ = function (parameters) {
	  return function (state) {
		  return function () {
			  connectXToY_(parameters["from"], parameters["to"], state);
		  };
	  };
  };
  var disconnectXFromY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[x].outgoing = state.units[x].outgoing.filter(function (i) {
					  return !(i === y);
				  });
				  state.units[y].incoming = state.units[y].incoming.filter(function (i) {
					  return !(i === x);
				  });
				  state.units[x].main.disconnect(state.units[y].main);
				  if (state.units[y].se) {
					  state.units[x].main.disconnect(state.units[y].se);
				  }
			  };
		  };
	  };
  };
  exports.disconnectXFromY_ = function (a) {
	  return function (state) {
		  return function () {
			  return disconnectXFromY_(a.from)(a.to)(state)();
		  };
	  };
  };
  exports.destroyUnit_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // hack for recorder
			  if (state.units[ptr].recorder) {
				  state.units[ptr].recorder.stop();
			  }
			  // hack for analyser
			  if (state.units[ptr].analyser) {
				  // effectful unsubscribe
				  state.units[ptr].analyser();
			  }
			  delete state.units[ptr];
		  };
	  };
  };
  // allpass
  exports.makeAllpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "allpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // analyser
  exports.makeAnalyser_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var analyserSideEffectFunction = a.cb;
			  var dest = new AnalyserNode(state.context, a);
			  // unsubscribe is effect unit
			  var unsubscribe = analyserSideEffectFunction(dest)();
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  analyserOrig: analyserSideEffectFunction,
				  analyser: unsubscribe,
				  main: state.context.createGain(),
				  se: dest,
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // audio worklet node
  exports.makeAudioWorkletNode_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var opts = a.options;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new AudioWorkletNode(state.context, opts.name, {
					  numberOfInputs: opts.numberOfInputs,
					  numberOfOutputs: opts.numberOfOutputs,
					  outputChannelCount: opts.outputChannelCount,
					  parameterData: opts.parameterData,
					  processorOptions: opts.processorOptions,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // bandpass
  exports.makeBandpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "bandpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // constant
  exports.makeConstant_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new ConstantSourceNode(context, i);
			  };
			  var resume = { offset: a.offset };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  exports.makeConvolver_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new ConvolverNode(state.context, { buffer: a.buffer }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // delay
  exports.makeDelay_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new DelayNode(state.context, {
					  delayTime: a.delayTime,
					  maxDelayTime: a.maxDelayTime,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // dynamicsCompressor
  exports.makeDynamicsCompressor_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new DynamicsCompressorNode(state.context, {
					  knee: a.knee,
					  ratio: a.ratio,
					  threshold: a.threshold,
					  attack: a.attack,
					  release: a.release,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // gain
  var makeGain_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new GainNode(state.context, {
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };
  exports.makeGain_ = makeGain_;
  // highpass
  exports.makeHighpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "highpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // highshelf
  exports.makeHighshelf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "highshelf",
					  frequency: a.frequency,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // input
  exports.makeInput_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };
  exports.makeIIRFilter_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new IIRFilterNode(state.context, {
					  feedforward: a.feedforward,
					  feedback: a.feedback,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // loopBuf
  exports.makeLoopBuf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new AudioBufferSourceNode(context, i);
			  };
			  var resume = {
				  loop: true,
				  buffer: a.buffer,
				  loopStart: a.loopStart,
				  loopEnd: a.loopEnd,
				  playbackRate: a.playbackRate,
			  };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // lowpass
  exports.makeLowpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "lowpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // lowshelf
  exports.makeLowshelf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "lowshelf",
					  frequency: a.frequency,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // media element

  exports.makeMediaElement_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var elt = a.element;
			  var createClosure = function () {
				  var unit = state.context.createMediaElementSource(elt);
				  return unit;
			  };
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  createClosure: createClosure,
				  resumeClosure: {},
				  main: createClosure(),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // microphone
  exports.makeMicrophone_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[a.id] = {
				  main: state.context.createMediaStreamSource(a.microphone),
				  outgoing: [a.parent],
				  incoming: [],
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // notch
  exports.makeNotch_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "notch",
					  frequency: a.frequency,
					  Q: a.q,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // peaking
  exports.makePeaking_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "peaking",
					  frequency: a.frequency,
					  Q: a.q,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // periodic osc
  exports.makePeriodicOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  var opts = {
					  frequency: i.frequency,
					  periodicWave:
						  i.spec.type === "wave"
							  ? i.spec.value
							  : makePeriodicWaveImpl(state.context)(i.spec.value.real)(
									  i.spec.value.img
							    )(),
				  };
				  var o = new OscillatorNode(context, opts);
				  return o;
			  };
			  var resume = { frequency: a.frequency, type: "custom", spec: a.spec };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // playBuf
  exports.makePlayBuf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  var opts = {
					  loop: i.loop,
					  buffer: i.buffer,
					  playbackRate: i.playbackRate,
				  };
				  return new AudioBufferSourceNode(context, opts);
			  };
			  var resume = {
				  loop: false,
				  buffer: a.buffer,
				  playbackRate: a.playbackRate,
				  bufferOffset: a.bufferOffset,
				  duration: a.duration,
			  };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset,
			  // 		a.bufferOffset,
			  // 		a.duration.type === "just" ? a.duration.value : undefined
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // recorder
  exports.makeRecorder_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var mediaRecorderSideEffectFn = a.cb;
			  var dest = state.context.createMediaStreamDestination();
			  var mediaRecorder = new MediaRecorder(dest.stream);
			  mediaRecorderSideEffectFn(mediaRecorder)();
			  mediaRecorder.start();
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  recorderOrig: mediaRecorderSideEffectFn,
				  recorder: mediaRecorder,
				  main: state.context.createGain(),
				  se: dest,
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // sawtooth osc
  exports.makeSawtoothOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "sawtooth" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // sine osc
  exports.makeSinOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "sine" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };
  exports.makeSubgraph_ = function (ptr) {
	  return function (parent) {
		  return function (enclosingScope) {
			  return function (sceneM) {
				  return function (state) {
					  return function () {
						  makeGain_({
							  id: ptr,
							  parent: parent,
							  scope: { type: "just", value: enclosingScope },
							  gain: 1.0,
						  })(state)();
						  state.units[ptr].sceneM = sceneM;
					  };
				  };
			  };
		  };
	  };
  };

  exports.removeSubgraph_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var j = a.pos;
			  var pj = `${ptr}-${j}`;
			  if (state.unsu[pj] !== undefined) {
				  state.unsu[pj]();
				  for (var i = 0; i < state.scopes[pj].length; i++) {
					  state.units[state.scopes[pj][i]].main.disconnect();
					  if (state.units[state.scopes[pj][i]].se) {
						  state.units[state.scopes[pj][i]].se.disconnect();
					  }
					  delete state.units[state.scopes[pj][i]];
				  }
				  delete state.scopes[pj];
				  delete state.unsu[pj];
				  delete state.scopes[pj];
			  }
		  };
	  };
  };

  exports.insertSubgraph_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var j = a.pos;
			  var index = a.index;
			  var pj = `${ptr}-${j}`;
			  if (state.unsu[pj] === undefined) {
				  state.scopes[pj] = [];
				  var sg = state.units[ptr].sceneM(index)(pj);
				  state.unsu[pj] = sg.actualized((instr) => () => instr(state)())();
			  }
		  };
	  };
  };
  // make speaker
  exports.makeSpeaker_ = function (a) {
	  return function (state) {
		  return function () {
			  state.units[a.id] = {
				  outgoing: [],
				  incoming: [],
				  main: state.context.createGain(),
				  se: state.context.destination,
			  };
		  };
	  };
  };
  // pan
  exports.makeStereoPanner_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new StereoPannerNode(state.context, {
					  pan: a.pan,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // square osc
  exports.makeSquareOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "square" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // triangle osc
  exports.makeTriangleOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "triangle" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  //lazy main: createClosure(state.context, resume),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };
  // wave shaper
  exports.makeWaveShaper_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.curve;
			  var b = aa.oversample;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new WaveShaperNode(state.context, {
					  curve: a,
					  oversample: b.type,
				  }),
			  };
			  addToScope(ptr, aa.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, aa.parent, state);
		  };
	  };
  };

  // set analyser

  exports.setAnalyserNodeCb_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.cb;
			  if (state.units[ptr].analyserOrig === a) {
				  return;
			  }
			  // first, unsubscribe
			  state.units[ptr].analyser && state.units[ptr].analyser();
			  state.units[ptr].analyser = a(state.units[ptr].se)();
			  state.units[ptr].analyserOrig = a;
		  };
	  };
  };

  // recorder

  // setting makes us stop the previous one if it exists
  exports.setMediaRecorderCb_ = function (aa) {
	  return function (state) {
		  return function () {
			  var a = aa.cb;
			  var ptr = aa.id;
			  if (state.units[ptr].recorderOrig === a) {
				  return;
			  }
			  state.units[ptr].recorder && state.units[ptr].recorder.stop();
			  var mediaRecorderSideEffectFn = a;
			  state.units[ptr].recorderOrig = a;
			  var mediaRecorder = new MediaRecorder(state.units[ptr].se);
			  mediaRecorderSideEffectFn(mediaRecorder)();
			  mediaRecorder.start();
		  };
	  };
  };

  // waveshaper curve
  exports.setWaveShaperCurve_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.curve;
			  state.units[ptr].main.curve = a;
		  };
	  };
  };
  exports.setAudioWorkletParameter_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.paramName;
			  var b = aa.paramValue;
			  workletSetter(state.units[ptr].main, a, state.deprecatedWriteHead, b);
		  };
	  };
  };
  const recalcResume = function (a, u, v) {
	  if (u.resume) {
		  if (a.value.n !== undefined) {
			  u.resume[v] = a.value.n;
		  }
	  }
  };
  exports.setGain_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.gain;
			  genericSetter(
				  state.units[ptr].main,
				  "gain",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "gain");
		  };
	  };
  };

  exports.setQ_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.q;
			  genericSetter(state.units[ptr].main, "Q", state.deprecatedWriteHead, a);
			  recalcResume(a, state.units[ptr], "Q");
		  };
	  };
  };
  exports.setBuffer_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.buffer;
			  if (state.units[ptr].resume) {
				  state.units[ptr].resume.buffer = a;
			  }
		  };
	  };
  };
  exports.setConvolverBuffer_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var buffer = aa.buffer;
			  state.units[ptr].main.buffer = buffer;
		  };
	  };
  };
  exports.setPeriodicOsc_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.spec;
			  if (state.units[ptr].resume) {
				  state.units[ptr].resume.spec = a;
			  }
		  };
	  };
  };
  exports.setPan_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.pan;
			  genericSetter(state.units[ptr].main, "pan", state.deprecatedWriteHead, a);
			  recalcResume(a, state.units[ptr], "pan");
		  };
	  };
  };
  exports.setThreshold_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.threshold;
			  genericSetter(
				  state.units[ptr].main,
				  "threshold",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "threshold");
		  };
	  };
  };
  exports.setLoopStart_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.loopStart;
			  state.units[ptr].main.loopStart = a;
			  state.units[ptr].resume.loopStart = a;
		  };
	  };
  };
  exports.setLoopEnd_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.loopEnd;
			  state.units[ptr].main.loopEnd = a;
			  state.units[ptr].resume.loopEnd = a;
		  };
	  };
  };
  exports.setBufferOffset_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.bufferOffset;
			  state.units[ptr].resume.bufferOffset = a;
		  };
	  };
  };
  exports.setDuration_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.duration;
			  state.units[ptr].duration = a;
		  };
	  };
  };
  exports.setRelease_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.release;
			  genericSetter(
				  state.units[ptr].main,
				  "release",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "release");
		  };
	  };
  };
  exports.setOffset_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.offset;
			  genericSetter(
				  state.units[ptr].main,
				  "offset",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "offset");
		  };
	  };
  };

  exports.setRatio_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.ratio;
			  genericSetter(
				  state.units[ptr].main,
				  "ratio",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "ratio");
		  };
	  };
  };
  exports.setAttack_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.attack;
			  genericSetter(
				  state.units[ptr].main,
				  "attack",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "attack");
		  };
	  };
  };
  exports.setKnee_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.knee;
			  genericSetter(
				  state.units[ptr].main,
				  "knee",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "knee");
		  };
	  };
  };
  exports.setDelay_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.delayTime;
			  genericSetter(
				  state.units[ptr].main,
				  "delayTime",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "delayTime");
		  };
	  };
  };
  exports.setPlaybackRate_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.playbackRate;
			  genericSetter(
				  state.units[ptr].main,
				  "playbackRate",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "playbackRate");
		  };
	  };
  };
  exports.setFrequency_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.frequency;
			  genericSetter(
				  state.units[ptr].main,
				  "frequency",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "frequency");
		  };
	  };
  };
  ///////////
  exports.setOnOff_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var onOff = aa.onOff;
			  if (onOff.x.type === "on") {
				  setOn_(ptr)(onOff)(state)();
			  } else if (onOff.x.type === "off") {
				  setOff_(ptr)(onOff)(state)();
			  } else if (onOff.x.type === "offOn") {
				  setOff_(ptr)({ x: { type: "off" }, o: 0.0 })(state)();
				  setOn_(ptr)({ x: { type: "on" }, o: onOff.o })(state)();
			  }
		  };
	  };
  };

  var setOn_ = function (ptr) {
	  return function (onOffInstr) {
		  return function (state) {
			  return function () {
				  if (state.units[ptr].onOff) {
					  return;
				  }
				  state.units[ptr].pendingOn = false;
				  state.units[ptr].onOff = true;
				  state.units[ptr].main = state.units[ptr].createClosure(
					  state.context,
					  state.units[ptr].resume
				  );
				  for (var i = 0; i < state.units[ptr].outgoing.length; i++) {
					  var ogi = state.units[ptr].outgoing[i];
					  state.units[ptr].main.connect(state.units[ogi].main);
					  if (state.units[ogi].se) {
						  state.units[ptr].main.connect(state.units[ogi].se);
					  }
				  }
				  if (state.units[ptr].resume && state.units[ptr].resume.bufferOffset) {
					  if (state.units[ptr].resume.duration.type === "just") {
						  state.units[ptr].main.start(
							  state.deprecatedWriteHead + onOffInstr.o,
							  state.units[ptr].resume.bufferOffset,
							  state.units[ptr].resume.duration.value
						  );
					  } else {
						  state.units[ptr].main.start(
							  state.deprecatedWriteHead + onOffInstr.o,
							  state.units[ptr].resume.bufferOffset
						  );
					  }
				  } else if (
					  state.units[ptr].resume &&
					  state.units[ptr].resume.loopStart
				  ) {
					  state.units[ptr].main.start(
						  state.deprecatedWriteHead + onOffInstr.o,
						  state.units[ptr].resume.loopStart
					  );
				  } else {
					  state.units[ptr].main.start(state.deprecatedWriteHead + onOffInstr.o);
				  }
			  };
		  };
	  };
  };

  var setOff_ = function (ptr) {
	  return function (onOffInstr) {
		  return function (state) {
			  return function () {
				  if (!state.units[ptr].onOff) {
					  return;
				  }
				  state.units[ptr].onOff = false;
				  var oldMain = state.units[ptr].main;
				  var oldOutgoing = state.units[ptr].outgoing.slice();
				  // defer disconnection until stop has happened
				  oldMain.addEventListener("ended", () => {
					  for (var i = 0; i < oldOutgoing.length; i++) {
						  var oogi = oldOutgoing[i];
						  try {
							  oldMain.disconnect(state.units[oogi].main);
							  if (state.units[oogi].se) {
								  oldMain.disconnect(state.units[oogi].se);
							  }
						  } catch (e) {
							  console.log(e);
							  // fail silently, as it means the unit is no longer available, but
							  // as we are disconnecting it doesn't matter
							  continue;
						  }
					  }
				  });
				  oldMain.stop(state.deprecatedWriteHead + onOffInstr.o);
			  };
		  };
	  };
  };

  var makePeriodicWaveImpl = function (ctx) {
	  return function (real_) {
		  return function (imag_) {
			  return function () {
				  var real = new Float32Array(real_.length);
				  var imag = new Float32Array(imag_.length);
				  for (var i = 0; i < real_.length; i++) {
					  real[i] = real_[i];
				  }
				  for (var i = 0; i < imag_.length; i++) {
					  imag[i] = imag_[i];
				  }
				  return ctx.createPeriodicWave(real, imag, {
					  disableNormalization: true,
				  });
			  };
		  };
	  };
  };                                                  
  exports.makeFFIAudioSnapshot = function (audioCtx) {
	  return function () {
		  return {
			  context: audioCtx,
			  deprecatedWriteHead: 0.0,
			  units: {},
			  unqidfr: makeid(10),
			  scopes: { root: [] },
			  unsu: {},
			  toConnect: {},
		  };
	  };
  };

  exports.close_ = function (audioCtx) {
	  return function () {
		  audioCtx.close();
	  };
  };
  exports.context_ = function () {
	  return new (window.AudioContext || window.webkitAudioContext)();
  };
  exports.contextState_ = function (audioCtx) {
	  return function () {
		  return audioCtx.state;
	  };
  };
  exports.getAudioClockTime = function (ctx) {
	  return function () {
		  return ctx.currentTime;
	  };
  };
})(PS["WAGS.Interpret"] = PS["WAGS.Interpret"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Core"] = $PS["WAGS.Core"] || {};
  var exports = $PS["WAGS.Core"];
  var Data_Variant_Maybe = $PS["Data.Variant.Maybe"];
  var Me = (function () {
      function Me(value0) {
          this.value0 = value0;
      };
      Me.create = function (value0) {
          return new Me(value0);
      };
      return Me;
  })();
  var Parent = (function () {
      function Parent(value0) {
          this.value0 = value0;
      };
      Parent.create = function (value0) {
          return new Parent(value0);
      };
      return Parent;
  })();
  var InitializeSinOsc = function (x) {
      return x;
  };
  var InitializeGain = function (x) {
      return x;
  };
  var useParentIfParent = function (v) {
      if (v instanceof Parent) {
          return Data_Variant_Maybe.just(v.value0);
      };
      return Data_Variant_Maybe.nothing;
  };
  exports["useParentIfParent"] = useParentIfParent;
  exports["Me"] = Me;
  exports["Parent"] = Parent;
  exports["InitializeGain"] = InitializeGain;
  exports["InitializeSinOsc"] = InitializeSinOsc;
})(PS);
(function($PS) {
  "use strict";
  $PS["WAGS.Interpret"] = $PS["WAGS.Interpret"] || {};
  var exports = $PS["WAGS.Interpret"];
  var $foreign = $PS["WAGS.Interpret"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var WAGS_Core = $PS["WAGS.Core"];
  var effectfulAudioInterpret$prime = function (dictIsEvent) {
      return function (toE) {
          return function (fromE) {
              return {
                  scope: "root",
                  ids: Data_Functor.map(FRP_Behavior.functorABehavior((dictIsEvent.Filterable1()).Functor1()))(Data_Show.show(Data_Show.showNumber))(FRP_Behavior.behavior(function (f) {
                      return toE(FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var r = Effect_Random.random();
                              return FRP_Event.subscribe(fromE(f))(function (x) {
                                  return k(x(r));
                              })();
                          };
                      }));
                  })),
                  destroyUnit: $foreign.destroyUnit_,
                  disconnectXFromY: $foreign.disconnectXFromY_,
                  connectXToY: $foreign.connectXToY_,
                  makeAllpass: $foreign.makeAllpass_,
                  makeAnalyser: $foreign.makeAnalyser_,
                  makeAudioWorkletNode: $foreign.makeAudioWorkletNode_,
                  makeBandpass: $foreign.makeBandpass_,
                  makeConstant: $foreign.makeConstant_,
                  makeConvolver: $foreign.makeConvolver_,
                  makeDelay: $foreign.makeDelay_,
                  makeDynamicsCompressor: $foreign.makeDynamicsCompressor_,
                  makeGain: $foreign.makeGain_,
                  makeHighpass: $foreign.makeHighpass_,
                  makeHighshelf: $foreign.makeHighshelf_,
                  makeIIRFilter: $foreign.makeIIRFilter_,
                  makeInput: $foreign.makeInput_,
                  makeLoopBuf: $foreign.makeLoopBuf_,
                  makeLowpass: $foreign.makeLowpass_,
                  makeLowshelf: $foreign.makeLowshelf_,
                  makeMediaElement: $foreign.makeMediaElement_,
                  makeMicrophone: $foreign.makeMicrophone_,
                  makeNotch: $foreign.makeNotch_,
                  makePeaking: $foreign.makePeaking_,
                  makePeriodicOsc: $foreign.makePeriodicOsc_,
                  makePlayBuf: $foreign.makePlayBuf_,
                  makeRecorder: $foreign.makeRecorder_,
                  makeSawtoothOsc: $foreign.makeSawtoothOsc_,
                  makeSinOsc: $foreign.makeSinOsc_,
                  makeSpeaker: $foreign.makeSpeaker_,
                  setDuration: $foreign.setDuration_,
                  makeSquareOsc: $foreign.makeSquareOsc_,
                  makeStereoPanner: $foreign.makeStereoPanner_,
                  makeSubgraph: function (v) {
                      return function (audio) {
                          return Data_Function.flip($foreign.makeSubgraph_(v.id)(v.parent)(v.scope))(audio)(function (index) {
                              return function (newScope) {
                                  var actualized = (function () {
                                      var elt = v.scenes(index);
                                      return fromE(elt(new WAGS_Core.Parent(v.id))((function () {
                                          var v1 = effectfulAudioInterpret$prime(dictIsEvent)(toE)(fromE);
                                          return {
                                              scope: newScope,
                                              ids: v1.ids,
                                              destroyUnit: v1.destroyUnit,
                                              disconnectXFromY: v1.disconnectXFromY,
                                              connectXToY: v1.connectXToY,
                                              makeAllpass: v1.makeAllpass,
                                              makeAnalyser: v1.makeAnalyser,
                                              makeAudioWorkletNode: v1.makeAudioWorkletNode,
                                              makeBandpass: v1.makeBandpass,
                                              makeConstant: v1.makeConstant,
                                              makeConvolver: v1.makeConvolver,
                                              makeDelay: v1.makeDelay,
                                              makeDynamicsCompressor: v1.makeDynamicsCompressor,
                                              makeGain: v1.makeGain,
                                              makeHighpass: v1.makeHighpass,
                                              makeHighshelf: v1.makeHighshelf,
                                              makeInput: v1.makeInput,
                                              makeIIRFilter: v1.makeIIRFilter,
                                              makeLoopBuf: v1.makeLoopBuf,
                                              makeLowpass: v1.makeLowpass,
                                              makeLowshelf: v1.makeLowshelf,
                                              makeMediaElement: v1.makeMediaElement,
                                              makeMicrophone: v1.makeMicrophone,
                                              makeNotch: v1.makeNotch,
                                              makePeaking: v1.makePeaking,
                                              makePeriodicOsc: v1.makePeriodicOsc,
                                              makePlayBuf: v1.makePlayBuf,
                                              makeRecorder: v1.makeRecorder,
                                              makeSawtoothOsc: v1.makeSawtoothOsc,
                                              makeSinOsc: v1.makeSinOsc,
                                              makeSpeaker: v1.makeSpeaker,
                                              makeSquareOsc: v1.makeSquareOsc,
                                              makeStereoPanner: v1.makeStereoPanner,
                                              makeSubgraph: v1.makeSubgraph,
                                              makeTriangleOsc: v1.makeTriangleOsc,
                                              makeTumult: v1.makeTumult,
                                              makeWaveShaper: v1.makeWaveShaper,
                                              setAnalyserNodeCb: v1.setAnalyserNodeCb,
                                              setMediaRecorderCb: v1.setMediaRecorderCb,
                                              setWaveShaperCurve: v1.setWaveShaperCurve,
                                              setAudioWorkletParameter: v1.setAudioWorkletParameter,
                                              setBuffer: v1.setBuffer,
                                              setConvolverBuffer: v1.setConvolverBuffer,
                                              setPeriodicOsc: v1.setPeriodicOsc,
                                              setOnOff: v1.setOnOff,
                                              setBufferOffset: v1.setBufferOffset,
                                              setDuration: v1.setDuration,
                                              setLoopStart: v1.setLoopStart,
                                              setLoopEnd: v1.setLoopEnd,
                                              setRatio: v1.setRatio,
                                              setOffset: v1.setOffset,
                                              setAttack: v1.setAttack,
                                              setGain: v1.setGain,
                                              setQ: v1.setQ,
                                              setPan: v1.setPan,
                                              setThreshold: v1.setThreshold,
                                              setRelease: v1.setRelease,
                                              setKnee: v1.setKnee,
                                              setDelay: v1.setDelay,
                                              setPlaybackRate: v1.setPlaybackRate,
                                              setFrequency: v1.setFrequency,
                                              removeSubgraph: v1.removeSubgraph,
                                              insertSubgraph: v1.insertSubgraph,
                                              setTumult: v1.setTumult
                                          };
                                      })()));
                                  })();
                                  return {
                                      actualized: actualized
                                  };
                              };
                          });
                      };
                  },
                  makeTriangleOsc: $foreign.makeTriangleOsc_,
                  makeTumult: function (v) {
                      return function (v1) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      };
                  },
                  makeWaveShaper: $foreign.makeWaveShaper_,
                  setAnalyserNodeCb: $foreign.setAnalyserNodeCb_,
                  setMediaRecorderCb: $foreign.setMediaRecorderCb_,
                  setWaveShaperCurve: $foreign.setWaveShaperCurve_,
                  setAudioWorkletParameter: $foreign.setAudioWorkletParameter_,
                  setBuffer: $foreign.setBuffer_,
                  setConvolverBuffer: $foreign.setConvolverBuffer_,
                  setPeriodicOsc: $foreign.setPeriodicOsc_,
                  setOnOff: $foreign.setOnOff_,
                  setBufferOffset: $foreign.setBufferOffset_,
                  setLoopStart: $foreign.setLoopStart_,
                  setLoopEnd: $foreign.setLoopEnd_,
                  setRatio: $foreign.setRatio_,
                  setOffset: $foreign.setOffset_,
                  setAttack: $foreign.setAttack_,
                  setGain: $foreign.setGain_,
                  setQ: $foreign.setQ_,
                  setPan: $foreign.setPan_,
                  setThreshold: $foreign.setThreshold_,
                  setRelease: $foreign.setRelease_,
                  setKnee: $foreign.setKnee_,
                  setDelay: $foreign.setDelay_,
                  setPlaybackRate: $foreign.setPlaybackRate_,
                  setFrequency: $foreign.setFrequency_,
                  removeSubgraph: $foreign.removeSubgraph_,
                  insertSubgraph: $foreign.insertSubgraph_,
                  setTumult: function (v) {
                      return function (v1) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      };
                  }
              };
          };
      };
  };
  var effectfulAudioInterpret = effectfulAudioInterpret$prime(FRP_Event.eventIsEvent)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  var contextState = function (dictMonadEffect) {
      var $50 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($51) {
          return $50($foreign.contextState_($51));
      };
  };
  var context = function (dictMonadEffect) {
      return Effect_Class.liftEffect(dictMonadEffect)($foreign.context_);
  };
  var close = function (dictMonadEffect) {
      return function (ctx) {
          return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
              var st = contextState(Effect_Class.monadEffectEffect)(ctx)();
              return Control_Applicative.when(Effect.applicativeEffect)(st !== "closed")($foreign.close_(ctx))();
          });
      };
  };
  exports["context"] = context;
  exports["close"] = close;
  exports["effectfulAudioInterpret"] = effectfulAudioInterpret;
  exports["getAudioClockTime"] = $foreign.getAudioClockTime;
  exports["makeFFIAudioSnapshot"] = $foreign.makeFFIAudioSnapshot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Clock"] = $PS["WAGS.Clock"] || {};
  var exports = $PS["WAGS.Clock"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var FRP_Event = $PS["FRP.Event"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var interval = function (ctx) {
      return function (iN) {
          return function (e) {
              var mkTimeout = function (k) {
                  return function (n) {
                      return function (cref) {
                          return function (iref) {
                              return function (vref) {
                                  return function (rt) {
                                      return function __do() {
                                          var go0 = Effect_Ref.read(cref)();
                                          return Control_Applicative.when(Effect.applicativeEffect)(go0)(function __do() {
                                              var t = WAGS_Interpret.getAudioClockTime(ctx)();
                                              var tid = Effect_Timer.setTimeout(Data_Int.round(Data_Ord.max(Data_Ord.ordNumber)(n - t - 4.0e-2)(1.0e-2) * 1000.0))(function __do() {
                                                  var go1 = Effect_Ref.read(cref)();
                                                  return Control_Applicative.when(Effect.applicativeEffect)(go1)(function __do() {
                                                      Effect_Ref.write(n)(vref)();
                                                      k(n)();
                                                      return mkTimeout(k)(n + rt)(cref)(iref)(vref)(rt)();
                                                  })();
                                              })();
                                              return Effect_Ref.write(new Data_Maybe.Just(tid))(iref)();
                                          })();
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var cref = Effect_Ref["new"](true)();
                      var iref = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var acTime = WAGS_Interpret.getAudioClockTime(ctx)();
                      var vref = Effect_Ref["new"](acTime + iN)();
                      mkTimeout(k)(iN)(cref)(iref)(vref)(iN)();
                      var unsub = FRP_Event.subscribe(e)(function (newN) {
                          return function __do() {
                              Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(iref))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Effect_Timer.clearTimeout))();
                              var cT = Effect_Ref.read(vref)();
                              return mkTimeout(k)(cT + newN)(cref)(iref)(vref)(newN)();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(unsub)(Effect_Ref.write(false)(cref)))(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(iref))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Effect_Timer.clearTimeout)));
                  };
              });
          };
      };
  };
  exports["interval"] = interval;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Common"] = $PS["WAGS.Common"] || {};
  var exports = $PS["WAGS.Common"];
  var WAGS_Core = $PS["WAGS.Core"];
  var initialSinOscNumber = {
      toInitializeSinOsc: function ($268) {
          return WAGS_Core.InitializeSinOsc((function (v) {
              return {
                  frequency: v
              };
          })($268));
      }
  };
  var initialGainNumber = {
      toInitializeGain: function ($272) {
          return WAGS_Core.InitializeGain((function (v) {
              return {
                  gain: v
              };
          })($272));
      }
  };
  var toInitializeSinOsc = function (dict) {
      return dict.toInitializeSinOsc;
  };
  var toInitializeGain = function (dict) {
      return dict.toInitializeGain;
  };
  exports["toInitializeGain"] = toInitializeGain;
  exports["toInitializeSinOsc"] = toInitializeSinOsc;
  exports["initialGainNumber"] = initialGainNumber;
  exports["initialSinOscNumber"] = initialSinOscNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Control"] = $PS["WAGS.Control"] || {};
  var exports = $PS["WAGS.Control"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Maybe = $PS["Data.Variant.Maybe"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Core = $PS["WAGS.Core"];
  var speaker = function (dictIsEvent) {
      return function (elts) {
          return function (v) {
              return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(function (me) {
                  return Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(FRP_Event_Class.bang(dictIsEvent)(v.makeSpeaker({
                      id: me
                  })))(Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictIsEvent.Plus0())(Data_Functor.map(Data_Functor.functorArray)(function (elt) {
                      return (function (y) {
                          return y;
                      })(elt)(new WAGS_Core.Parent(me))(v);
                  })(elts)));
              }));
          };
      };
  };
  var speaker2 = function (dictIsEvent) {
      return speaker(dictIsEvent);
  };
  var parentalSupervision = function (v) {
      if (v instanceof WAGS_Core.Me) {
          return Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Data_Function["const"](v.value0));
      };
      return Control_Category.identity(Control_Category.categoryFn);
  };
  var gain = function (dictIsEvent) {
      return function (dictInitialGain) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeGain(dictInitialGain)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v1.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(parentalSupervision(parent)(function (me) {
                                  return Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(FRP_Event_Class.bang(dictIsEvent)(v1.makeGain({
                                      id: me,
                                      parent: WAGS_Core.useParentIfParent(parent),
                                      scope: Data_Variant_Maybe.just(v1.scope),
                                      gain: v.gain
                                  })))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (v2) {
                                      return Data_Variant.match()()()({
                                          gain: function (g) {
                                              return v1.setGain({
                                                  id: me,
                                                  gain: g
                                              });
                                          }
                                      })(v2);
                                  })(atts)))(Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictIsEvent.Plus0())(Data_Functor.map(Data_Functor.functorArray)(function (elt) {
                                      return (function (y) {
                                          return y;
                                      })(elt)(new WAGS_Core.Parent(me))(v1);
                                  })(elts)));
                              })));
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var gain_ = function (dictIsEvent) {
      return function (dictInitialGain) {
          return function (i) {
              return function (a) {
                  return gain(dictIsEvent)(dictInitialGain)(i)(Control_Plus.empty(dictIsEvent.Plus0()))(a);
              };
          };
      };
  };
  var __sinOsc = function (dictIsEvent) {
      return function (dictInitialSinOsc) {
          return function (i$prime) {
              return function (atts) {
                  var v = WAGS_Common.toInitializeSinOsc(dictInitialSinOsc)(i$prime);
                  var go = function (parent) {
                      return function (v1) {
                          return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v1.ids)(FRP_Event_Class.bang(dictIsEvent)(Data_Unit.unit)))(parentalSupervision(parent)(function (me) {
                              return Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(FRP_Event_Class.bang(dictIsEvent)(v1.makeSinOsc({
                                  id: me,
                                  parent: WAGS_Core.useParentIfParent(parent),
                                  scope: Data_Variant_Maybe.just(v1.scope),
                                  frequency: v.frequency
                              })))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts));
                          })));
                      };
                  };
                  return go;
              };
          };
      };
  };
  var sinOsc = function (dictIsEvent) {
      return function (dictInitialSinOsc) {
          return __sinOsc(dictIsEvent)(dictInitialSinOsc);
      };
  };
  exports["gain"] = gain;
  exports["gain_"] = gain_;
  exports["sinOsc"] = sinOsc;
  exports["speaker2"] = speaker2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Parameter"] = $PS["WAGS.Parameter"] || {};
  var exports = $PS["WAGS.Parameter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];
  var AudioOnOff = function (x) {
      return x;
  };
  var AudioEnvelope = function (x) {
      return x;
  };
  var AudioParameter = function (x) {
      return x;
  };
  var toAudioOnOffAudioOnOff = {
      toAudioOnOff: Control_Category.identity(Control_Category.categoryFn)
  };
  var toAudioParameter = function (dict) {
      return dict.toAudioParameter;
  };
  var toAudioOnOff = function (dict) {
      return dict.toAudioOnOff;
  };                                            
  var _on = Data_Variant.inj()({
      reflectSymbol: function () {
          return "on";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var _off = Data_Variant.inj()({
      reflectSymbol: function () {
          return "off";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var _envelope = (function () {
      var $195 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "envelope";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($196) {
          return AudioParameter($195($196));
      };
  })();
  var toAudioParameterAudioEnve = {
      toAudioParameter: _envelope
  };
  exports["toAudioOnOff"] = toAudioOnOff;
  exports["toAudioParameter"] = toAudioParameter;
  exports["AudioEnvelope"] = AudioEnvelope;
  exports["_on"] = _on;
  exports["_off"] = _off;
  exports["AudioOnOff"] = AudioOnOff;
  exports["toAudioOnOffAudioOnOff"] = toAudioOnOffAudioOnOff;
  exports["toAudioParameterAudioEnve"] = toAudioParameterAudioEnve;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Properties"] = $PS["WAGS.Properties"] || {};
  var exports = $PS["WAGS.Properties"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var onOff = function () {
      return function (dictToAudioOnOff) {
          var $15 = Data_Newtype.wrap();
          var $16 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "onOff";
              }
          })(Type_Proxy["Proxy"].value);
          var $17 = WAGS_Parameter.toAudioOnOff(dictToAudioOnOff);
          return function ($18) {
              return $15($16($17($18)));
          };
      };
  };
  var gain = function () {
      return function (dictToAudioParameter) {
          var $29 = Data_Newtype.wrap();
          var $30 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "gain";
              }
          })(Type_Proxy["Proxy"].value);
          var $31 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($32) {
              return $29($30($31($32)));
          };
      };
  };
  exports["gain"] = gain;
  exports["onOff"] = onOff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Run"] = $PS["WAGS.Run"] || {};
  var exports = $PS["WAGS.Run"];
  var FRP_Event = $PS["FRP.Event"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];                
  var run2 = function (ctx) {
      return function (s) {
          return function __do() {
              var ffi = WAGS_Interpret.makeFFIAudioSnapshot(ctx)();
              var u = FRP_Event.subscribe(WAGS_Control.speaker2(FRP_Event.eventIsEvent)(s)(WAGS_Interpret.effectfulAudioInterpret))(function (f) {
                  return f(ffi);
              })();
              return u;
          };
      };
  };
  exports["run2"] = run2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Variant"] = $PS["WAGS.Variant"] || {};
  var exports = $PS["WAGS.Variant"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Variant = $PS["Data.Variant"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var prjsNilRow = {
      "prjs'": function (v) {
          return function (v1) {
              return {};
          };
      }
  };
  var injsNilRow = {
      "injs'": function (v) {
          return function (v1) {
              return {};
          };
      }
  };
  var prjs$prime = function (dict) {
      return dict["prjs'"];
  };
  var prjs_ = function () {
      return function (dictPrjs) {
          return function (v) {
              return prjs$prime(dictPrjs)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
          };
      };
  };
  var prjsCons = function (dictIsSymbol) {
      return function (dictPrjs) {
          return function () {
              return function () {
                  return function () {
                      return function () {
                          return {
                              "prjs'": function (x) {
                                  return function (v) {
                                      return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(Data_Variant.prj()(dictIsSymbol)(Data_Maybe.alternativeMaybe)(Type_Proxy["Proxy"].value))(prjs$prime(dictPrjs)(x)(Type_Proxy["Proxy"].value));
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var injs$prime = function (dict) {
      return dict["injs'"];
  };
  var injs_ = function () {
      return function (dictInjs) {
          return function (v) {
              return injs$prime(dictInjs)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
          };
      };
  };
  var injsCons = function (dictIsSymbol) {
      return function (dictInjs) {
          return function () {
              return function () {
                  return function () {
                      return function () {
                          return {
                              "injs'": function (x) {
                                  return function (v) {
                                      return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(Data_Variant.inj()(dictIsSymbol)(Type_Proxy["Proxy"].value))(injs$prime(dictInjs)(x)(Type_Proxy["Proxy"].value));
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  exports["injs_"] = injs_;
  exports["prjs_"] = prjs_;
  exports["injsNilRow"] = injsNilRow;
  exports["injsCons"] = injsCons;
  exports["prjsNilRow"] = prjsNilRow;
  exports["prjsCons"] = prjsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.WAC"] = $PS["WAGS.Example.Docs.Events.WAC"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.WAC"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_Toplevel = $PS["Deku.Toplevel"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_Memoize = $PS["FRP.Event.Memoize"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Clock = $PS["WAGS.Clock"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];
  var WAGS_Variant = $PS["WAGS.Variant"];                
  var uip = WAGS_Variant.prjs_()(WAGS_Variant.prjsCons({
      reflectSymbol: function () {
          return "init";
      }
  })(WAGS_Variant.prjsCons({
      reflectSymbol: function () {
          return "startStop";
      }
  })(WAGS_Variant.prjsNilRow)()()()())()()()())(Type_Proxy["Proxy"].value);
  var uii = WAGS_Variant.injs_()(WAGS_Variant.injsCons({
      reflectSymbol: function () {
          return "init";
      }
  })(WAGS_Variant.injsCons({
      reflectSymbol: function () {
          return "startStop";
      }
  })(WAGS_Variant.injsNilRow)()()()())()()()())(Type_Proxy["Proxy"].value);
  var ssi = WAGS_Variant.injs_()(WAGS_Variant.injsCons({
      reflectSymbol: function () {
          return "start";
      }
  })(WAGS_Variant.injsCons({
      reflectSymbol: function () {
          return "stop";
      }
  })(WAGS_Variant.injsNilRow)()()()())()()()())(Type_Proxy["Proxy"].value);
  var start = uii.startStop(ssi.start(Data_Unit.unit));
  var stop = function (r) {
      return uii.startStop(ssi.stop(r));
  };
  var random = FRP_Behavior.behavior(function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (f) {
              return function __do() {
                  var $11 = Effect_Random.random();
                  return k(f($11))();
              };
          });
      });
  });
  var main = Deku_Toplevel.runInBody(uii.init(Data_Unit.unit))(function (push) {
      return function (event) {
          var ss = Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(ssi.start(Data_Unit.unit)))(Data_Filterable.filterMap(FRP_Event.filterableEvent)(uip.startStop)(event));
          var music = function (time) {
              var e0 = (function () {
                  var $12 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioEnve);
                  var $13 = Data_Semiring.add(Data_Semiring.semiringNumber)(3.0e-2);
                  return function ($14) {
                      return $12(WAGS_Parameter.AudioEnvelope((function (v) {
                          return {
                              p: Data_Functor.map(Data_Functor.functorArray)(Data_Semiring.mul(Data_Semiring.semiringNumber)(5.0e-2))([ 0.0, 0.6, 0.2, 0.1, 0.5, 3.0e-2, 0.0 ]),
                              d: 0.15,
                              o: v
                          };
                      })($13($14))));
                  };
              })();
              var v = (function () {
                  var $15 = FRP_Event_Class.bang(FRP_Event.eventIsEvent);
                  var $16 = WAGS_Properties.onOff()(WAGS_Parameter.toAudioOnOffAudioOnOff);
                  return function ($17) {
                      return $15($16(WAGS_Parameter.AudioOnOff((function (v1) {
                          return {
                              x: WAGS_Parameter["_on"],
                              o: v1
                          };
                      })($17))));
                  };
              })();
              var v1 = (function () {
                  var $18 = FRP_Event_Class.bang(FRP_Event.eventIsEvent);
                  var $19 = WAGS_Properties.onOff()(WAGS_Parameter.toAudioOnOffAudioOnOff);
                  var $20 = Data_Semiring.add(Data_Semiring.semiringNumber)(0.22);
                  return function ($21) {
                      return $18($19(WAGS_Parameter.AudioOnOff((function (v2) {
                          return {
                              x: WAGS_Parameter["_off"],
                              o: v2
                          };
                      })($20($21)))));
                  };
              })();
              return [ WAGS_Control.gain_(FRP_Event.eventIsEvent)(WAGS_Common.initialGainNumber)(1.0)(Data_Functor.map(Data_Functor.functorArray)(function (i) {
                  return WAGS_Control.gain(FRP_Event.eventIsEvent)(WAGS_Common.initialGainNumber)(0.0)(Data_Functor.map(FRP_Event.functorEvent)(e0)(time))([ WAGS_Control.sinOsc(FRP_Event.eventIsEvent)(WAGS_Common.initialSinOscNumber)(Data_Int.toNumber(i) * 80.0 + 440.0)(FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Functor.map(Data_Functor.functorFn)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Applicative.applicativeFn)([ v, v1 ])))(time))) ]);
              })(Data_Array.range(0)(29))) ];
          };
          return Deku_DOM_Elt_Div.div_(FRP_Event.eventIsEvent)([ Deku_DOM_Elt_Div.div_(FRP_Event.eventIsEvent)([ Deku_DOM_Elt_Button.button(FRP_Event.eventIsEvent)(Data_Functor.mapFlipped(FRP_Event.functorEvent)(ss)(function (e) {
              return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Data_Variant.match()()()({
                  stop: function (u) {
                      return Control_Apply.applySecond(Effect.applyEffect)(u)(push(start));
                  },
                  start: function (v) {
                      return function __do() {
                          var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
                          var myIvl = FRP_Event_Memoize.memoize(FRP_Event_Memoize.memoizableEvent)(WAGS_Clock.interval(ctx)(0.25)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(0.25)))();
                          var r = WAGS_Run.run2(ctx)(music(myIvl))();
                          return push(stop(Control_Apply.applySecond(Effect.applyEffect)(r)(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx))))();
                      };
                  }
              })(e))));
          }))([ Deku_Control.text(FRP_Event.eventIsEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Variant.match()()()({
              stop: function (v) {
                  return "Turn off";
              },
              start: function (v) {
                  return "Turn on";
              }
          }))(ss)) ]) ]) ]);
      };
  });
  var cp = function (n) {
      if (n < 0.142857) {
          return 261.625565;
      };
      if (n < 0.285714) {
          return 293.664768;
      };
      if (n < 0.428571) {
          return 349.228231;
      };
      if (n < 0.571429) {
          return 391.995436;
      };
      if (n < 0.714286) {
          return 440.0;
      };
      if (n < 0.857143) {
          return 523.251131;
      };
      if (Data_Boolean.otherwise) {
          return 587.329536;
      };
      throw new Error("Failed pattern match at WAGS.Example.Docs.Events.WAC (line 54, column 1 - line 61, column 27): " + [ n.constructor.name ]);
  };
  exports["ssi"] = ssi;
  exports["start"] = start;
  exports["stop"] = stop;
  exports["random"] = random;
  exports["uii"] = uii;
  exports["uip"] = uip;
  exports["cp"] = cp;
  exports["main"] = main;
})(PS);
PS["WAGS.Example.Docs.Events.WAC"].main();